import sys
import time
import os.path
import subprocess
import shared_util
from subprocess import Popen, PIPE, STDOUT
from collections import defaultdict

def parseData(chars):
   # chars format =  port number, name, os, date, rank, rankNum, modRank, des

   return (chars[0], chars[1], chars[2], chars[3], chars[4], int(chars[5]),
      float(chars[6]), chars[7])

def parseDbEntry(entry):

   return (entry['name'], entry['os'], entry['date'], entry['rank'],
      entry['rankNum'], entry['modRank'], entry['des'])
      
def print_db(db):
   # prints exploit database contents
   
   for key in db:
      print key, len(db[key])
      for i in range(len(db[key])):
         print db[key][i]

def determine_db(exploit_file_gen):

   db = defaultdict()   
   db = generate_db(exploit_file_gen) if exploit_file_gen == 1 or os.path.isfile(".db_exploits.txt") == False else read_db_from_file()
   return db
         
def write_db_to_file(db, filename):

   print "Saving exploit database to .db_exploits in CSV format"
   db_file = open(filename, 'w')
   
   for key in db:
      for i in range(len(db[key])):
         (name, os, date, rank, rankNum, modRank, des) = parseDbEntry(db[key][i])
            
         # writes exploit data to file
         dataString = str(key) + "," + str(name) + "," + str(os) + "," + str(date) + \
         "," + str(rank) + "," + str(rankNum) + "," + str(modRank) + "," + str(des)
      
         db_file.write(dataString.rstrip())
         db_file.write("\n")
   
   db_file.close()

def read_db_from_file():

   print "Reading exploit database from .db_exploits.txt"
   db_file = open(".db_exploits.txt", 'r')
   data = db_file.readlines()
   db_file.close()

   return format_db(data, 0)

def generate_db(exploit_file_gen):

   print "Generating exploit database"
   db = defaultdict()
   data = []

   p = subprocess.Popen(['java', '-jar', 'cortana.jar', str(shared_util.prop_file_name), 'exploits.cna'], 
      stdout=subprocess.PIPE, stdin=subprocess.PIPE)
   
   output = p.communicate()[0]

   for line in output.splitlines():
      data.append(line)
         
   db = format_db(data, 1)

   if os.path.isfile(".db_exploits.txt") == True:
      return compareRankings(db)
   return db

def format_db(in_data, newLine):

   db = defaultdict()

   for i in range(len(in_data)):
      chars = in_data[i].split(',')
      (port, name, os, date, rank, rankNum, modRank, des) = parseData(chars)

      # creates dictionary of information for each exploit
      data = {'name': name, 'os': os, 'rank': rank, 'rankNum': rankNum,
         'modRank': modRank, 'date': date, 'des': des}
      
      # creates a searchable database of exploits, organized by port number
      if port not in db:
         db[port] = []
      db[port].append(data)

   return db

def compareRankings(db):

   db_file = read_db_from_file()

   for port in db:
      for i in range(len(db[port])):
         db_ex = db[port][i]
         for j in range(len(db_file[port])):
            file_ex = db_file[port][j]
            if db_ex['name'] == file_ex['name']:
               if db_ex['rankNum'] == file_ex['rankNum'] and db_ex['rankNum'] != db_ex['modRank']:
                  db[port][i]['modRank'] = file_ex['modRank']

   return db

def update_db(db_e, db_h, session_db, exploitsRun):
   
   for session in session_db:
      for attack in exploitsRun[session_db[session]['host']]:
         attack_name = attack['name']
         for port in db_e:
            for exploit in range(len(db_e[port])):
               if attack_name == db_e[port][exploit]['name']:
                  weight = determineWeight(db_h[session_db[session]['host']], \
                     db_e[port][exploit], attack['success'])
                  db_e[port][exploit]['modRank'] += weight

   write_db_to_file(db_e, ".db_exploits.txt")

def determineWeight(host, exploit, success):

   weight = 0

   if host['os_name'] == "linux":
      #print host['os_version']
      if host['os_version'] == "12.04":
         weight = 0.00074
      elif host['os_version'] == "3.2.6":
         weight = 0.000247
      else:
         weight = 0.000148
   elif host['os_name'] == "windows":
      #print host['os_version']
      if host['os_version'] == "xp" or host['os_version'] == "2000":
         weight = 0.00844
      elif host['os_version'] == "7":
         weight = 0.04746
      else:
         weight = 0.00403

   if exploit['os'] == "multi":
      weight /= 2

   return weight if success == "1" else -weight
         
'''
def main():

   sessions = "1.1.1.1,true,2,root,multi/samba/usermap_script,shell,139\n2.2.2.2,false,0,0,0,0,0\n3.3.3.3,true,3,root,windows/smb/ms08_067_netapi,meterpreter,445"
   db_s = shared_util.parseSessionData(sessions)

   db_e = read_db_from_file()
   db_h = {'1.1.1.1': {'ip': '1.1.1.1', 'os_name': 'linux', 'os_sp': '2.6.X'}, 
      '2.2.2.2': {'ip': '2.2.2.2', 'os_name': 'windows', 'os_sp': '10'}, 
      '3.3.3.3': {'ip': '3.3.3.3', 'os_name': 'windows', 'os_sp': 'xp'}}

   attacks = {'1.1.1.1': [{'name': 'linux/http/netgear_dgn1000b_setup_exec'}, {'name': 'multi/samba/usermap_script'}],
      '3.3.3.3': [{'name': 'linux/http/netgear_dgn1000b_setup_exec'}, {'name': 'windows/smb/ms08_067_netapi'}]}

   update_db(db_e, db_h, db_s, attacks)

main()
'''